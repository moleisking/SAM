{"version":3,"sources":["services/user.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,yBAAyB,oBAAoB,CAAC,CAAA;AAE9C,mBAA2B,SAAS,CAAC,CAAA;AAIrC;IAEE,qBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAI,CAAC;IAEnC,8BAAQ,GAAR,UAAS,SAAS;QAAlB,iBAiBC;QAhBC,IAAI,KAAK,GAAG,OAAO,GAAG,SAAS,CAAC,IAAI,GAAG,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC;QACjE,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAEpE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAQ,CAAC,WAAW,GAAG,aAAa,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,CACzF,UAAC,IAAI;gBACH,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;oBACtB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC;oBACjC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC,CACF,CAAA;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yBAAG,GAAH;QACE,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QAE3E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAQ,CAAC,WAAW,GAAG,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;aACxE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEO,iCAAW,GAAnB,UAAoB,GAAa;QAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;IACzB,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAU;QAC5B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IA/CH;QAAC,iBAAU,EAAE;;mBAAA;IAgDb,kBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,mBAAW,cA8CvB,CAAA","file":"services/user.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Headers, Response } from \"@angular/http\";\r\nimport { Settings } from \"../config/settings\";\r\nimport { User } from \"../models/user\";\r\nimport { Observable } from \"rxjs/Rx\";\r\n\r\n@Injectable()\r\n\r\nexport class UserService {\r\n\r\n  constructor(private http: Http) { }\r\n\r\n  register(usercreds) {\r\n    let creds = \"name=\" + usercreds.name + \"&pass=\" + usercreds.pass;\r\n    let headers = new Headers();\r\n    headers.append(\"Content-Type\", \"application/X-www-form-urlencoded\");\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.http.post(Settings.backend_url + \"/api/signup\", creds, { headers: headers }).subscribe(\r\n        (data) => {\r\n          if (data.json().success)\r\n            resolve(true);\r\n          else {\r\n            console.log(data.json().message);\r\n            reject(data.json().message);\r\n          }\r\n        }\r\n      )\r\n    });\r\n  }\r\n\r\n  all(): Observable<User[]> {\r\n    let headers = new Headers();\r\n    headers.append(\"authorization\", \"JWT \" + localStorage.getItem(\"auth_key\"));\r\n\r\n    return this.http.get(Settings.backend_url + \"/users\", { headers: headers })\r\n      .map(this.extractData)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private extractData(res: Response) {\r\n    console.log(res);\r\n    let body = res.json();\r\n    return body.data || {};\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    // We'd also dig deeper into the error to get a better message\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : \"Server error\";\r\n    console.error(errMsg); // log to console instead\r\n    return Observable.throw(errMsg);\r\n  }\r\n}"],"sourceRoot":"/source/"}