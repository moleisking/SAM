{"version":3,"sources":["components/login-form.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,uBAAuB,iBAAiB,CAAC,CAAA;AACzC,sBAAiE,gBAAgB,CAAC,CAAA;AAClF,uBAA2B,iBAAiB,CAAC,CAAA;AAC7C,qBAA4B,kBAAkB,CAAC,CAAA;AAC/C,qBAA4B,kBAAkB,CAAC,CAAA;AAC/C,yCAAyC;AAUzC;IAOI,4BAAoB,IAAiB,EAAU,IAAiB,EAAU,MAAc,EAAU,OAAoB,EAC1G,GAAgB;QADR,SAAI,GAAJ,IAAI,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAa;QAC1G,QAAG,GAAH,GAAG,CAAa;QACxB,IAAI,CAAC,OAAO,GAAG,sBAAsB,CAAC;IAC1C,CAAC;IAED,qCAAQ,GAAR;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;YACzB,IAAI,EAAE,CAAC,EAAE,EAAO,mBAAU,CAAC,QAAQ,CAAC;YACpC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,mBAAU,CAAC,QAAQ,EAAO,mBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAO,mBAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SACtG,CAAC,CAAC;QAEH,gCAAgC;IACpC,CAAC;IAED,4BAA4B;IAC5B,8DAA8D;IAC9D,4DAA4D;IAE5D,qGAAqG;IACrG,mGAAmG;IACnG,IAAI;IAEJ,kCAAK,GAAL;QAAA,iBAWC;QAVG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CACnC;YACI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;QACzC,CAAC,EACD,UAAC,GAAG;YACA,KAAI,CAAC,OAAO,GAAG,cAAc,CAAC;QAClC,CAAC,CACJ,CAAA;IACL,CAAC;IAED,qCAAQ,GAAR;QAAA,iBAWC;QAVG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CACtC;YACI,KAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;QACrC,CAAC,EACD,UAAC,GAAG;YACA,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACvB,CAAC,CACJ,CAAC;IACN,CAAC;IA7DL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE,CAAC,kBAAW,EAAE,kBAAW,CAAC;YACrC,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;YACrC,UAAU,EAAE,CAAC,gCAAwB,CAAC;SACzC,CAAC;;0BAAA;IAwDF,yBAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDY,0BAAkB,qBAsD9B,CAAA","file":"components/login-form.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { REACTIVE_FORM_DIRECTIVES, FormGroup, FormBuilder } from \"@angular/forms\";\r\nimport { Validators } from \"@angular/common\";\r\nimport { AuthService } from \"../services/auth\";\r\nimport { UserService } from \"../services/user\";\r\n// import { User } from \"../models/user\";\r\n\r\n@Component({\r\n    selector: \"login-form\",\r\n    providers: [UserService, AuthService],\r\n    templateUrl: \"/views/login-form.html\",\r\n    styleUrls: [\"/styles/login-form.css\"],\r\n    directives: [REACTIVE_FORM_DIRECTIVES]\r\n})\r\n\r\nexport class LoginFormComponent implements OnInit {\r\n\r\n    public myForm: FormGroup; // our model driven form\r\n    public submitted: boolean; // keep track on form submission\r\n    // public events: any[] = []; // list of form changes\r\n    public message: string;\r\n\r\n    constructor(private auth: AuthService, private user: UserService, private router: Router, private builder: FormBuilder,\r\n        private _fb: FormBuilder) {\r\n        this.message = \"login messages here.\";\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.myForm = this._fb.group({\r\n            name: [\"\", <any>Validators.required],\r\n            pass: [\"\", [<any>Validators.required, <any>Validators.minLength(3), <any>Validators.maxLength(20)]]\r\n        });\r\n\r\n        // this.subcribeToFormChanges();\r\n    }\r\n\r\n    // subcribeToFormChanges() {\r\n    //     const myFormStatusChanges$ = this.myForm.statusChanges;\r\n    //     const myFormValueChanges$ = this.myForm.valueChanges;\r\n\r\n    //     myFormStatusChanges$.subscribe(x => this.events.push({ event: \"STATUS_CHANGED\", object: x }));\r\n    //     myFormValueChanges$.subscribe(x => this.events.push({ event: \"VALUE_CHANGED\", object: x }));\r\n    // }\r\n\r\n    login() {\r\n        this.submitted = true;\r\n        console.log(this.myForm.value);\r\n        this.auth.login(this.myForm.value).then(\r\n            () => {\r\n                this.router.navigate([\"/dashboard\"]);\r\n            },\r\n            (res) => {\r\n                this.message = \"invalid user\";\r\n            }\r\n        )\r\n    }\r\n\r\n    register() {\r\n        this.submitted = true;\r\n        console.log(this.myForm.value);\r\n        this.user.register(this.myForm.value).then(\r\n            () => {\r\n                this.message = \"user registered\";\r\n            },\r\n            (res) => {\r\n                this.message = res;\r\n            }\r\n        );\r\n    }\r\n}"],"sourceRoot":"/source/"}